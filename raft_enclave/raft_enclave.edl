enclave {
    from "sgx_tsgxssl.edl" import *;
    from "sgx_tae_service.edl" import *;
  	from "sgx_tkey_exchange.edl" import *;

	include "sgx_trts.h"
	include "sgx_key_exchange.h"
    include "log_level.hxx"
    include "stdbool.h"

    trusted {
        public void ecall_raft_instance_run(int srv_id, [in, string] const char *address, uint16_t port);
        public void ecall_raft_instance_commit_bg();
        public void ecall_raft_instance_stop();

        /* => service_port.cxx */
        public void ecall_timer_expired_callback(uint64_t task_uid, bool success);

        /* rpc_listener_port.cxx => asio_rpc_listener.hxx */
        public int32_t ecall_handle_rpc_request(uint32_t size, [in, size=size] const uint8_t *message, [out] uint32_t *msg_id);
        public bool ecall_fetch_rpc_response(uint32_t msg_id, uint32_t buffer_size, [out, size=buffer_size] uint8_t *buffer);

        /* asio_rpc_client.hxx => rpc_client_port.cxx */
        public void ecall_rpc_response(uint32_t req_uid, uint32_t size, [in, size=size] const uint8_t *msg, [in, string] const char *exception);

        /* attestation */
        public sgx_status_t ecall_get_report([in] sgx_target_info_t *target_info, [out] sgx_report_t *report);
    };

    untrusted {
        void ocall_puts([in, string]const char* str);
        int64_t get_time_milliseconds();

        /* logger_port.hxx => logger_port.cxx */
        void ocall_print_log(unsigned level, [in, string] const char *log);

        /* service_port.hxx => asio_task_scheduler.cxx */
        void ocall_schedule_delayed_task(uint64_t task_uid, int32_t milliseconds);
        void ocall_cancel_delayed_task(uint64_t task_uid);

        /* rpc_listener_port.hxx => asio_rpc_listener.cxx */
        // void ocall_rpc_listener_create(uint16_t port);
        // void ocall_rpc_listener_stop();

        /* rpc_client_port.hxx => asio_rpc_client.cxx */
        uint32_t ocall_rpc_client_create([in, string] const char *endpoint);
        void ocall_rpc_client_close(uint32_t client_uid);
        void ocall_send_rpc_request(uint32_t client_uid, uint32_t size, [in, size=size] const uint8_t *message, uint32_t request_uid);
    };
};
